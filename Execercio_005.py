# Para cada um dos algoritmos a seguir, unique1 e unique2 os quais resolvem o problema da
# singularidade de um elemento, executar uma análise experimental do tempo de execução
# para determinar o valor maior de n tal que o algoritmo dado execute em um minuto ou
# menos. 



import time


def performance():
    i = 1
    begin = float(time.time())
    temp = 0
    while temp < 20:
        
        print((unique1(sequence)))
        end = float(time.time())
        temp = end - begin
        print( '  ',(temp))
        i= i + 1



def unique1(S):
	"""Return True if there are no duplicate elements in sequence S """
	for j in range(len(S)):
		for k in range(j+1, len(S)):
			if S[j] == S[k]:
				return False
	return True


def unique2(S):
	"""Return True if there are no duplicate elements in sequence S """
	temp = sorted(S)
	for j in range(1, len(temp)):
		if S[j - 1 ] == S[j]:
			return False
	return True


sequence = [395086, 607996, 1259979, 1715429, 2236192, 3046785, 3291786, 4392594, 4472413, 4844068, 4865878, 4889682, 4999051, 5058501, 5524441, 5734125, 7383055, 8303282, 8829624, 8846197, 9164085, 9928925, 10107939, 11888702, 11951761, 12064980, 13324149, 14744380, 15929522, 16038185, 16491900, 17052857, 18677208, 20516294, 20603427, 21427539, 21819069, 23232576, 23484805, 23779229, 23847188, 24409998, 24544589, 24601658, 24674910, 24705376, 24961198, 25243392, 25911769, 25918216, 26989001, 27860140, 28370517, 28751283, 29240608, 29776965, 30232057, 30329089, 30535113, 31799582, 31838020, 31970524, 32123244, 33064155, 33565931, 34647268, 34766273, 35290812, 36030745, 36198171, 36591705, 37049097, 37595875, 38157963, 38178284, 38758522, 39041232, 39773583, 39977941, 40037514, 41327513, 41947720, 42027052, 42744391, 43147329, 43792027, 43859964, 44046708, 44657048, 44934574, 45286665, 45484900, 45931347, 46156732, 46647438, 46810769, 47066769, 47088758, 47111149, 47628923, 49065426, 49993469, 50136918, 51092279, 51916400, 52488871, 53542645, 53927181, 54726875, 55617002, 55689097, 56090959, 56158967, 57553881, 59347500, 59457375, 60139959, 60449837, 63085396, 63130392, 63280098, 64086112, 64098243, 64185974, 64263560, 64853932, 65695318, 65940970, 66649131, 66739038, 67323504, 67634587, 68289429, 69158178, 69312608, 69340518, 69464143, 69508960, 69957255, 69965931, 70738284, 70883850, 71233789, 71280311, 72118512, 72687037, 74116248, 75461585, 75859873, 76840343, 76967171, 77588019, 78149961, 78905358, 79061117, 80125058, 80485171, 82363881, 82421337, 82569443, 83190387, 83473749, 83652852, 84218473, 84407613, 84408672, 84488466, 85252078, 85934188, 86023517, 86723206, 86927493, 87096792, 87607349, 87662319, 88310739, 88603519, 89484292, 90853603, 91183431, 92333534, 92571529, 93286605, 93544157, 94152666, 94304676, 94493108, 94926657, 95003572, 95051155, 95451187, 95616263, 96381420, 97211193, 97614783, 97820410, 98676602, 98784438, 98941329, 99250832]

performance()
#print(unique2(sequence))
